name: 'AI Code Review - Generate Embeddings'
description: 'Generate embeddings for codebase using the AI Code Review tool'

branding:
  icon: 'brain'
  color: 'blue'

inputs:
  # Processing Configuration (matching CLI options)
  files:
    description: 'Specific files or patterns to process (space-separated)'
    required: false
    default: ''
  concurrency:
    description: 'Number of concurrent embedding requests'
    required: false
    default: '10'
  exclude:
    description: 'Patterns to exclude (space-separated glob patterns)'
    required: false
    default: '**/node_modules/** **/dist/** **/build/** **/.git/**'
  exclude-file:
    description: 'File containing patterns to exclude (one per line)'
    required: false
    default: ''
  no-gitignore:
    description: 'Disable automatic exclusion of files in .gitignore'
    required: false
    default: 'false'
  verbose:
    description: 'Show verbose output'
    required: false
    default: 'false'

  # Artifact Management
  embeddings-retention-days:
    description: 'Number of days to retain embedding artifacts'
    required: false
    default: '30'

outputs:
  embeddings-generated:
    description: 'Number of embeddings generated'
    value: ${{ steps.stats.outputs.embeddings-count }}
  files-processed:
    description: 'Number of files processed'
    value: ${{ steps.stats.outputs.files-count }}
  database-size-mb:
    description: 'Size of embeddings database in MB'
    value: ${{ steps.stats.outputs.db-size }}
  processing-time:
    description: 'Processing time in seconds'
    value: ${{ steps.timing.outputs.duration }}
  artifact-name:
    description: 'Name of the created embeddings artifact'
    value: ai-code-review-embeddings-${{ github.repository_id }}
  cache-hit:
    description: 'Whether embeddings were restored from cache'
    value: ${{ steps.cache-check.outputs.cache-hit }}
  previous-embeddings-restored:
    description: 'Whether previous embeddings were restored from artifacts'
    value: ${{ steps.setup-artifacts.outcome == 'success' }}
  restored-artifact-name:
    description: 'Name of the restored embeddings artifact'
    value: ai-code-review-embeddings-${{ github.repository_id }}

runs:
  using: 'composite'
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        echo "🔍 Validating action inputs..."

        # Validate concurrency is a positive integer
        if ! [[ "${{ inputs.concurrency }}" =~ ^[0-9]+$ ]] || [ "${{ inputs.concurrency }}" -le 0 ]; then
          echo "❌ Error: concurrency must be a positive integer, got: ${{ inputs.concurrency }}"
          exit 1
        fi

        # Validate retention days
        if ! [[ "${{ inputs.embeddings-retention-days }}" =~ ^[0-9]+$ ]] || [ "${{ inputs.embeddings-retention-days }}" -le 0 ]; then
          echo "❌ Error: embeddings-retention-days must be a positive integer, got: ${{ inputs.embeddings-retention-days }}"
          exit 1
        fi

        echo "✅ Input validation passed"

    - name: Checkout AI Code Review Tool (fallback)
      uses: actions/checkout@v4
      with:
        repository: ${{ github.action_repository }}
        ref: ${{ github.action_ref }}
        path: ai-code-review-tool
        token: ${{ github.token }}
      continue-on-error: true

    - name: Resolve Tool Root
      id: tool
      shell: bash
      run: |
        # Prefer the repository already downloaded by the runner for this action
        CANDIDATE="${{ github.action_path }}/../../.."
        if CANON=$(cd "$CANDIDATE" 2>/dev/null && pwd -P); then
          if [ -f "$CANON/src/index.js" ]; then
            echo "tool-root=$CANON" >> $GITHUB_OUTPUT
            echo "✅ Using tool from action repository checkout at: $CANON"
            exit 0
          fi
        fi

        CHECKOUT_DIR="$PWD/ai-code-review-tool"
        if CANON_CHECKOUT=$(cd "$CHECKOUT_DIR" 2>/dev/null && pwd -P); then
          if [ -f "$CANON_CHECKOUT/src/index.js" ]; then
            echo "tool-root=$CANON_CHECKOUT" >> $GITHUB_OUTPUT
            echo "✅ Using tool from explicit checkout at: $CANON_CHECKOUT"
            exit 0
          fi
        fi

        echo "❌ Could not locate tool source (src/index.js)." >&2
        echo "Checked: $CANDIDATE and $CHECKOUT_DIR" >&2
        exit 1

    - name: Prepare dependency lock for caching
      shell: bash
      run: |
        mkdir -p .tool-cache
        if [ -f "${{ steps.tool.outputs.tool-root }}/package-lock.json" ]; then
          cp "${{ steps.tool.outputs.tool-root }}/package-lock.json" .tool-cache/package-lock.json
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
        cache-dependency-path: '.tool-cache/package-lock.json'

    - name: Install AI Tool Dependencies
      shell: bash
      working-directory: ${{ steps.tool.outputs.tool-root }}
      run: |
        echo "📦 Installing AI Code Review tool dependencies..."
        npm ci --no-audit --silent

    - name: Download Previous Embeddings
      id: setup-artifacts
      uses: dawidd6/action-download-artifact@v11
      with:
        name: ai-code-review-embeddings-${{ github.repository_id }}
        search_artifacts: true
        github_token: ${{ github.token }}
        workflow_conclusion: success
        if_no_artifact_found: warn
      continue-on-error: true

    - name: Setup Embeddings Directories
      shell: bash
      run: |
        # Check if artifacts were downloaded to a subdirectory (common with artifact actions)
        ARTIFACT_SUBDIR="ai-code-review-embeddings-${{ github.repository_id }}"

        if [ -d "$ARTIFACT_SUBDIR" ]; then
          # Move .ai-review-lancedb if it exists in subdirectory
          if [ -d "$ARTIFACT_SUBDIR/.ai-review-lancedb" ]; then
            mv "$ARTIFACT_SUBDIR/.ai-review-lancedb" "${{ github.workspace }}/.ai-review-lancedb"
          fi

          # Move .ai-review-fastembed-cache if it exists in subdirectory
          if [ -d "$ARTIFACT_SUBDIR/.ai-review-fastembed-cache" ]; then
            mv "$ARTIFACT_SUBDIR/.ai-review-fastembed-cache" "${{ github.workspace }}/.ai-review-fastembed-cache"
          fi

          # Clean up artifact subdirectory
          rmdir "$ARTIFACT_SUBDIR" 2>/dev/null || true
        fi

    - name: Generate Embeddings
      id: generate
      shell: bash
      working-directory: ${{ steps.tool.outputs.tool-root }}
      env:
        DEBUG: ${{ inputs.verbose }}
        VERBOSE: ${{ inputs.verbose }}
        GITHUB_WORKSPACE_PATH: ${{ github.workspace }}
      run: |
        echo "🧠 Generating embeddings for codebase..."

        # Build command arguments based on actual CLI options
        ARGS="embeddings:generate"
        ARGS="${ARGS} --directory \"$GITHUB_WORKSPACE\""
        ARGS="${ARGS} --concurrency ${{ inputs.concurrency }}"

        # Add specific files if provided
        if [ -n "${{ inputs.files }}" ]; then
          for file_pattern in ${{ inputs.files }}; do
            ARGS="${ARGS} --files '${file_pattern}'"
          done
        fi

        # Always exclude action-related directories and files
        ARGS="${ARGS} --exclude 'ai-code-review-tool/**'"
        ARGS="${ARGS} --exclude '.ai-code-review-artifacts/**'"
        ARGS="${ARGS} --exclude '.tool-cache/**'"

        # Add user-specified exclude patterns
        if [ -n "${{ inputs.exclude }}" ]; then
          for pattern in ${{ inputs.exclude }}; do
            ARGS="${ARGS} --exclude '${pattern}'"
          done
        fi

        # Add exclude file if specified
        if [ -n "${{ inputs.exclude-file }}" ] && [ -f "$GITHUB_WORKSPACE/${{ inputs.exclude-file }}" ]; then
          ARGS="${ARGS} --exclude-file \"$GITHUB_WORKSPACE/${{ inputs.exclude-file }}\""
        fi

        # Add gitignore flag
        if [ "${{ inputs.no-gitignore }}" = "true" ]; then
          ARGS="${ARGS} --no-gitignore"
        fi

        # Add verbose flag
        if [ "${{ inputs.verbose }}" = "true" ]; then
          ARGS="${ARGS} --verbose"
        fi

        # Execute with error handling
        if eval "node src/index.js ${ARGS}"; then
          echo "✅ Embedding generation completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Embedding generation failed"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Upload Embeddings Artifact
      id: upload-artifacts
      if: steps.generate.outputs.success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ai-code-review-embeddings-${{ github.repository_id }}
        include-hidden-files: true
        path: |
          ${{ github.workspace }}/.ai-review-lancedb/
          ${{ github.workspace }}/.ai-review-fastembed-cache/
        retention-days: ${{ inputs.embeddings-retention-days }}
        if-no-files-found: warn
      continue-on-error: true

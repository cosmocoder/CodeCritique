name: 'AI Code Review - Generate Embeddings'
description: 'Generate embeddings for codebase using the AI Code Review tool'

branding:
  icon: 'brain'
  color: 'blue'

inputs:
  # Processing Configuration (matching CLI options)
  files:
    description: 'Specific files or patterns to process (space-separated)'
    required: false
    default: ''
  concurrency:
    description: 'Number of concurrent embedding requests'
    required: false
    default: '10'
  exclude:
    description: 'Patterns to exclude (space-separated glob patterns)'
    required: false
    default: '**/node_modules/** **/dist/** **/build/** **/.git/**'
  exclude-file:
    description: 'File containing patterns to exclude (one per line)'
    required: false
    default: ''
  no-gitignore:
    description: 'Disable automatic exclusion of files in .gitignore'
    required: false
    default: 'false'
  verbose:
    description: 'Show verbose output'
    required: false
    default: 'false'

  # Artifact Management
  embeddings-retention-days:
    description: 'Number of days to retain embedding artifacts'
    required: false
    default: '30'

outputs:
  embeddings-generated:
    description: 'Number of embeddings generated'
    value: ${{ steps.stats.outputs.embeddings-count }}
  files-processed:
    description: 'Number of files processed'
    value: ${{ steps.stats.outputs.files-count }}
  database-size-mb:
    description: 'Size of embeddings database in MB'
    value: ${{ steps.stats.outputs.db-size }}
  processing-time:
    description: 'Processing time in seconds'
    value: ${{ steps.timing.outputs.duration }}
  artifact-name:
    description: 'Name of the created embeddings artifact'
    value: ai-code-review-embeddings-${{ github.repository_id }}
  cache-hit:
    description: 'Whether embeddings were restored from cache'
    value: ${{ steps.cache-check.outputs.cache-hit }}
  previous-embeddings-restored:
    description: 'Whether previous embeddings were restored from artifacts'
    value: ${{ steps.setup-artifacts.outcome == 'success' }}
  restored-artifact-name:
    description: 'Name of the restored embeddings artifact'
    value: ai-code-review-embeddings-${{ github.repository_id }}

runs:
  using: 'composite'
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        echo "🔍 Validating action inputs..."

        # Validate concurrency is a positive integer
        if ! [[ "${{ inputs.concurrency }}" =~ ^[0-9]+$ ]] || [ "${{ inputs.concurrency }}" -le 0 ]; then
          echo "❌ Error: concurrency must be a positive integer, got: ${{ inputs.concurrency }}"
          exit 1
        fi

        # Validate retention days
        if ! [[ "${{ inputs.embeddings-retention-days }}" =~ ^[0-9]+$ ]] || [ "${{ inputs.embeddings-retention-days }}" -le 0 ]; then
          echo "❌ Error: embeddings-retention-days must be a positive integer, got: ${{ inputs.embeddings-retention-days }}"
          exit 1
        fi

        echo "✅ Input validation passed"

    - name: Checkout AI Code Review Tool (fallback)
      uses: actions/checkout@v4
      with:
        repository: ${{ github.action_repository }}
        ref: ${{ github.action_ref }}
        path: ai-code-review-tool
        token: ${{ github.token }}
      continue-on-error: true

    - name: Resolve Tool Root
      id: tool
      shell: bash
      run: |
        # Prefer the repository already downloaded by the runner for this action
        CANDIDATE="${{ github.action_path }}/../../.."
        if CANON=$(cd "$CANDIDATE" 2>/dev/null && pwd -P); then
          if [ -f "$CANON/src/index.js" ]; then
            echo "tool-root=$CANON" >> $GITHUB_OUTPUT
            echo "✅ Using tool from action repository checkout at: $CANON"
            exit 0
          fi
        fi

        CHECKOUT_DIR="$PWD/ai-code-review-tool"
        if CANON_CHECKOUT=$(cd "$CHECKOUT_DIR" 2>/dev/null && pwd -P); then
          if [ -f "$CANON_CHECKOUT/src/index.js" ]; then
            echo "tool-root=$CANON_CHECKOUT" >> $GITHUB_OUTPUT
            echo "✅ Using tool from explicit checkout at: $CANON_CHECKOUT"
            exit 0
          fi
        fi

        echo "❌ Could not locate tool source (src/index.js)." >&2
        echo "Checked: $CANDIDATE and $CHECKOUT_DIR" >&2
        exit 1

    - name: Prepare dependency lock for caching
      shell: bash
      run: |
        mkdir -p .tool-cache
        if [ -f "${{ steps.tool.outputs.tool-root }}/package-lock.json" ]; then
          cp "${{ steps.tool.outputs.tool-root }}/package-lock.json" .tool-cache/package-lock.json
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
        cache-dependency-path: '.tool-cache/package-lock.json'

    - name: Install AI Tool Dependencies
      shell: bash
      working-directory: ${{ steps.tool.outputs.tool-root }}
      run: |
        echo "📦 Installing AI Code Review tool dependencies..."
        npm ci --no-audit --silent

    - name: Download Previous Embeddings
      id: setup-artifacts
      uses: actions/download-artifact@v4
      with:
        name: ai-code-review-embeddings-${{ github.repository_id }}
        path: ${{ github.workspace }}
      continue-on-error: true

    - name: Generate Content Hash
      id: content-hash
      shell: bash
      run: |
        # Generate content hash for caching based on:
        # - Target directory contents (git hash if available)
        # - AI tool version (commit hash)
        # - Processing configuration
        TARGET_HASH="unknown"
        if [ -d ".git" ]; then
          TARGET_HASH=$(git rev-parse HEAD 2>/dev/null || echo "no-git")
        fi

        AI_TOOL_HASH=$(cd "${{ steps.tool.outputs.tool-root }}" && git rev-parse HEAD 2>/dev/null || echo "no-git")
        CONFIG_HASH=$(echo "${{ inputs.files }}|${{ inputs.exclude }}|${{ inputs.concurrency }}" | sha256sum | cut -d' ' -f1 | head -c 12)

        CONTENT_HASH="${TARGET_HASH:0:8}-${AI_TOOL_HASH:0:8}-${CONFIG_HASH}"
        echo "content-hash=${CONTENT_HASH}" >> $GITHUB_OUTPUT
        echo "📋 Content hash: ${CONTENT_HASH}"

    - name: Check for Cached Embeddings
      id: cache-check
      uses: actions/cache@v4
      with:
        path: .ai-code-review-embeddings
        key: ai-code-review-embeddings-${{ github.repository }}-${{ steps.content-hash.outputs.content-hash }}
        restore-keys: |
          ai-code-review-embeddings-${{ github.repository }}-

    - name: Start Timing
      id: start-timing
      shell: bash
      run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT

    - name: Generate Embeddings
      id: generate
      shell: bash
      working-directory: ${{ steps.tool.outputs.tool-root }}
      env:
        DEBUG: ${{ inputs.verbose }}
        VERBOSE: ${{ inputs.verbose }}
        GITHUB_WORKSPACE_PATH: ${{ github.workspace }}
      run: |
        echo "🧠 Generating embeddings for codebase..."

        # Build command arguments based on actual CLI options
        ARGS="embeddings:generate"
        ARGS="${ARGS} --directory \"$GITHUB_WORKSPACE\""
        ARGS="${ARGS} --concurrency ${{ inputs.concurrency }}"

        # Add specific files if provided
        if [ -n "${{ inputs.files }}" ]; then
          for file_pattern in ${{ inputs.files }}; do
            ARGS="${ARGS} --files '${file_pattern}'"
          done
        fi

        # Always exclude action-related directories and files
        ARGS="${ARGS} --exclude 'ai-code-review-tool/**'"
        ARGS="${ARGS} --exclude '.ai-code-review-artifacts/**'"
        ARGS="${ARGS} --exclude '.tool-cache/**'"

        # Add user-specified exclude patterns
        if [ -n "${{ inputs.exclude }}" ]; then
          for pattern in ${{ inputs.exclude }}; do
            ARGS="${ARGS} --exclude '${pattern}'"
          done
        fi

        # Add exclude file if specified
        if [ -n "${{ inputs.exclude-file }}" ] && [ -f "$GITHUB_WORKSPACE/${{ inputs.exclude-file }}" ]; then
          ARGS="${ARGS} --exclude-file \"$GITHUB_WORKSPACE/${{ inputs.exclude-file }}\""
        fi

        # Add gitignore flag
        if [ "${{ inputs.no-gitignore }}" = "true" ]; then
          ARGS="${ARGS} --no-gitignore"
        fi

        # Add verbose flag
        if [ "${{ inputs.verbose }}" = "true" ]; then
          ARGS="${ARGS} --verbose"
        fi

        # Execute with error handling
        if eval "node src/index.js ${ARGS}"; then
          echo "✅ Embedding generation completed successfully"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Embedding generation failed"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Calculate Processing Time
      id: timing
      shell: bash
      run: |
        START_TIME="${{ steps.start-timing.outputs.start-time }}"
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "duration=${DURATION}" >> $GITHUB_OUTPUT
        echo "⏱️ Processing completed in ${DURATION} seconds"

    - name: Gather Statistics
      id: stats
      shell: bash
      working-directory: ${{ steps.tool.outputs.tool-root }}
      env:
        GITHUB_WORKSPACE_PATH: ${{ github.workspace }}
      run: |
        echo "📊 Gathering embedding statistics..."

        # Get stats using the CLI tool
        STATS_ARGS="embeddings:stats --directory \"$GITHUB_WORKSPACE\""

        if STATS_OUTPUT=$(eval "node src/index.js ${STATS_ARGS}" 2>/dev/null); then
          echo "📋 Statistics output:"
          echo "$STATS_OUTPUT"

          # Parse statistics from output
          EMBEDDINGS_COUNT=$(echo "$STATS_OUTPUT" | grep -o 'Total embeddings: [0-9]*' | grep -o '[0-9]*' || echo "0")
          FILES_COUNT=$(echo "$STATS_OUTPUT" | grep -o 'Files with embeddings: [0-9]*' | grep -o '[0-9]*' || echo "0")

          # Calculate database size if embeddings directory exists
          DB_SIZE_MB=0
          LANCEDB_LOCATION="${{ github.workspace }}/.ai-review-lancedb"

          if [ -d "$LANCEDB_LOCATION" ] && [ "$(ls -A "$LANCEDB_LOCATION" 2>/dev/null)" ]; then
            DB_SIZE_BYTES=$(du -sb "$LANCEDB_LOCATION" 2>/dev/null | cut -f1 || echo "0")
            DB_SIZE_MB=$((DB_SIZE_BYTES / 1024 / 1024))
          fi

          echo "embeddings-count=${EMBEDDINGS_COUNT}" >> $GITHUB_OUTPUT
          echo "files-count=${FILES_COUNT}" >> $GITHUB_OUTPUT
          echo "db-size=${DB_SIZE_MB}" >> $GITHUB_OUTPUT

          echo "✅ Statistics: ${EMBEDDINGS_COUNT} embeddings, ${FILES_COUNT} files, ${DB_SIZE_MB}MB"
        else
          echo "⚠️ Could not gather statistics, setting defaults"
          echo "embeddings-count=0" >> $GITHUB_OUTPUT
          echo "files-count=0" >> $GITHUB_OUTPUT
          echo "db-size=0" >> $GITHUB_OUTPUT
        fi

    - name: Upload Embeddings Artifact
      id: upload-artifacts
      if: steps.generate.outputs.success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ai-code-review-embeddings-${{ github.repository_id }}
        include-hidden-files: true
        path: |
          ${{ github.workspace }}/.ai-review-lancedb/
          ${{ github.workspace }}/.ai-review-fastembed-cache/
        retention-days: ${{ inputs.embeddings-retention-days }}
        if-no-files-found: warn
      continue-on-error: true

    - name: Generate Summary
      if: always()
      shell: bash
      run: |
        echo "## 🧠 AI Code Review - Embedding Generation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Status** | ${{ steps.generate.outputs.success == 'true' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Directory** | \`workspace\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Embeddings Generated** | ${{ steps.stats.outputs.embeddings-count }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Files Processed** | ${{ steps.stats.outputs.files-count }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Database Size** | ${{ steps.stats.outputs.db-size }} MB |" >> $GITHUB_STEP_SUMMARY
        echo "| **Processing Time** | ${{ steps.timing.outputs.duration }} seconds |" >> $GITHUB_STEP_SUMMARY
        echo "| **Cache Hit** | ${{ steps.cache-check.outputs.cache-hit == 'true' && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Previous Embeddings** | ${{ steps.setup-artifacts.outcome == 'success' && '✅ Restored' || '📝 Initial Generation' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Concurrency** | ${{ inputs.concurrency }} |" >> $GITHUB_STEP_SUMMARY

        if [ "${{ inputs.verbose }}" = "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Tool Repository:** ${{ github.action_repository }}@${{ github.action_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Pattern:** \`${{ inputs.files || 'Auto-detected' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Exclude Patterns:** \`${{ inputs.exclude }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Content Hash:** \`${{ steps.content-hash.outputs.content-hash }}\`" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.setup-artifacts.outcome }}" = "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Incremental Processing" >> $GITHUB_STEP_SUMMARY
          echo "Previous embeddings were restored from artifact: \`ai-code-review-embeddings-${{ github.repository_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "The CLI tool automatically detected existing embeddings and processed only changed files for optimal performance." >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.generate.outputs.success }}" != "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ Error Information" >> $GITHUB_STEP_SUMMARY
          echo "The embedding generation process failed. Please check the action logs for detailed error information." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        echo "🧹 Cleaning up temporary files..."
        if [ -d ai-code-review-tool ]; then rm -rf ai-code-review-tool; fi
        # Cleanup handled by shared artifact manager
        echo "✅ Cleanup completed"
